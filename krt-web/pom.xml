<?xml version="1.0" encoding="UTF-8"?>

<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <parent>
        <artifactId>krt</artifactId>
        <groupId>com.krt</groupId>
        <version>${krt.version}</version>
    </parent>

    <artifactId>krt-web</artifactId>
    <name>krt-web</name>
    <url>http://www.cnkrt.com</url>
    <description>项目web启动器</description>

    <dependencies>
        <!-- #############开发环境依赖##############   -->
        <!-- 代码生成器 -->
        <dependency>
            <groupId>com.krt</groupId>
            <artifactId>krt-gen</artifactId>
            <version>${krt.version}</version>
        </dependency>
        <!--  #############正式环境依赖##############   -->
        <!-- 核心框架 -->
        <dependency>
            <groupId>com.krt</groupId>
            <artifactId>krt-framework</artifactId>
            <version>${krt.version}</version>
        </dependency>
        <!-- 系统管理 -->
        <dependency>
            <groupId>com.krt</groupId>
            <artifactId>krt-sys</artifactId>
            <version>${krt.version}</version>
        </dependency>
        <!-- 验证码 -->
        <dependency>
            <groupId>com.krt</groupId>
            <artifactId>krt-plugin-captcha</artifactId>
            <version>${krt.version}</version>
        </dependency>
        <!-- 接口api -->
        <dependency>
            <groupId>com.krt</groupId>
            <artifactId>krt-api</artifactId>
            <version>${krt.version}</version>
        </dependency>
        <!-- 文件管理 -->
        <dependency>
            <groupId>com.krt</groupId>
            <artifactId>krt-plugin-file</artifactId>
            <version>${krt.version}</version>
        </dependency>
        <!-- 定时器 -->
        <dependency>
            <groupId>com.krt</groupId>
            <artifactId>krt-plugin-quartz</artifactId>
            <version>${krt.version}</version>
        </dependency>
        <!-- 工作流 -->
        <dependency>
            <groupId>com.krt</groupId>
            <artifactId>krt-act</artifactId>
            <version>${krt.version}</version>
        </dependency>
        <!-- 政务业务 -->
        <dependency>
            <groupId>com.krt</groupId>
            <artifactId>zw-biz</artifactId>
            <version>${krt.version}</version>
        </dependency>
    </dependencies>
    <build>
        <finalName>activiti</finalName>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
            </plugin>
           <!-- <plugin>
              <groupId>com.spotify</groupId>
              <artifactId>docker-maven-plugin</artifactId>
              <version>${docker-maven-plugin.version}</version>
               &lt;!&ndash;将插件绑定在某个阶段执行&ndash;&gt;
              <executions>
                  <execution>
                      <id>build-image</id>
                   &lt;!&ndash;  将 mvn docker:build 绑定至 mvn package 上
                      即当执行 mvn package 时，会自动执行 mvn docker:build 生成镜像&ndash;&gt;
                      <phase>package</phase>
                      <goals>
                          <goal>build</goal>
                      </goals>
                  </execution>
              </executions>
              <configuration>
                  &lt;!&ndash; 指定生成的镜像名&ndash;&gt;
                  <imageName>jx-epana/epana-auth</imageName>
                  &lt;!&ndash; 指定版本号&ndash;&gt;
                  <imageTags>
                      <imageTag>latest</imageTag>
                  </imageTags>
                   &lt;!&ndash;指定远程服务器 Docker 地址&ndash;&gt;
                  <dockerHost>http://172.0.52.154:2375</dockerHost>
                   Dockerfile位置
                  <dockerDirectory>${project.basedir}/src/main/resources/docker</dockerDirectory>
                  <resources>
                      <resource>
                           &lt;!&ndash;容器中自定义 jar 包存放路径&ndash;&gt;
                          <targetPath>/</targetPath>
                         &lt;!&ndash;本地 jar 包所在路径&ndash;&gt;
                          <directory>${project.build.directory}</directory>
                           本地 jar 包名称　
                          <include>${project.build.finalName}.jar</include>
                      </resource>
                  </resources>
              </configuration>
          </plugin>-->
        </plugins>
    </build>

</project>